// Setup the main container to use a flex box-model allowing us to simplify the layout and "sticky" bar.
.wp-site-blocks {
	display: flex;
	flex-direction: column;
	min-height: calc(100vh - var(--wp-global-header-offset, 0px) - var(--local-header-height, 0px));

	> main,
	> article {
		// Make the content area grow to fill any remaining space on the screen,
		// so that the footer is pushed to the bottom.
		margin-bottom: auto;
	}
}

@include break-mobile {
	// limit size of any element that is aligned left/right
	.wp-block[data-align="left"], // This is for the editor
	.wp-block[data-align="right"], // This is for the editor
	.wp-site-blocks .alignleft,
	.wp-site-blocks .alignright {
		max-width: var(--wp--custom--alignment--aligned-max-width);
	}
}

// A two-column grid, with a narrower left column and content centered in the right column.
.two-column-grid-container {
	padding-left: var(--wp--custom--alignment--edge-spacing);
	padding-right: var(--wp--custom--alignment--edge-spacing);

	@include break-wide() {
		display: grid;
		grid-template-columns: calc(var(--wp--custom--layout--content-meta-size) - 32px) auto;

		// This defines the minimum horizontal gap. An additional implicit gap is created because the right column
		// contents have a `max-width` and are justified in the center.
		grid-gap: 0 var(--wp--style--block-gap);
	}
}

// Add support for nested grid-containers (for example, using this pattern in post content).
.two-column-grid-container > .two-column-grid-container {
	padding-left: 0;
	padding-right: 0;

	@include break-wide() {
		grid-column: 1 / 3;
		width: auto;
		max-width: none;
		margin-left: calc(-1 * var(--wp--custom--alignment--edge-spacing)) !important;
		margin-right: calc(-1 * var(--wp--custom--alignment--edge-spacing)) !important;
		padding-left: var(--wp--custom--alignment--edge-spacing);
		padding-right: var(--wp--custom--alignment--edge-spacing);
	}
}

// Explicitly align right content - this is done automatically in the `has-dynamic-rows` version,
// but needs to be applied to the default content.
.two-column-grid-container .is-right-column {

	@include break-wide() {
		justify-self: center;
		width: var(--wp--custom--layout--content-size);
		max-width: var(--wp--custom--layout--content-size);
		margin-top: 0;
	}
}

.two-column-grid-container .is-left-column {

	@include break-wide() {
		grid-column: 1;
		margin-top: 0;
	}
}

// "Dynamic rows" refers to the fact that there could be arbitrary content in the container, and that all the
// content should be in the right column. Wide & full alignments will break out and span the full 2 columns.
.two-column-grid-container.has-dynamic-rows {
	> .alignfull {
		width: auto;
		max-width: none;
		margin-left: calc(-1 * var(--wp--custom--alignment--edge-spacing)) !important;
		margin-right: calc(-1 * var(--wp--custom--alignment--edge-spacing)) !important;
	}

	@include break-wide() {
		> * {
			grid-row: auto;

			&:not(.alignfull):not(.alignwide):not(.two-column-grid-container) {
				grid-column: 2;
				justify-self: center;
				width: var(--wp--custom--layout--content-size);
				max-width: var(--wp--custom--layout--content-size);
			}

			&.alignfull,
			&.alignwide {
				grid-column: 1 / 3;
			}

			&.alignwide {
				width: 100%;
				max-width: 100%;
			}
		}
	}
}

// Four column grid is only supported on wide & full widths.
.four-column-grid-container:where(.alignwide, .alignfull) {

	@include break-wide() {
		justify-self: center;
		width: var(--wp--custom--layout--wide-size);
		max-width: var(--wp--custom--layout--wide-size);

		display: grid;
		grid-template-columns: repeat(4, 1fr);

		// This defines the minimum horizontal gap. An additional implicit gap is created because the right column
		// contents have a `max-width` and are justified in the center.
		grid-gap: 0 var(--wp--style--block-gap);

		> * {
			// Remove nested margins so each child is vertically aligned.
			margin: 0 !important;
		}
	}
}
