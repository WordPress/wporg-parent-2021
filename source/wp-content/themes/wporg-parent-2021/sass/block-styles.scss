@import "base/breakpoints";

// A two-column grid, with a narrower left column and content centered in the right column.
.is-style-two-column-display {
	padding-left: var(--wp--preset--spacing--60);
	padding-right: var(--wp--preset--spacing--60);

	// Clear the columns styling on smaller screens
	&.wp-block-columns {
		display: block;

		> * + * {
			margin-top: var(--wp--style--block-gap);
		}
	}

	> .alignfull {
		width: auto;
		max-width: none;
		justify-self: stretch;
		margin-left: calc(-1 * var(--wp--preset--spacing--60)) !important;
		margin-right: calc(-1 * var(--wp--preset--spacing--60)) !important;
	}

	@include break-xlarge() {
		display: grid;
		grid-template-columns: calc(var(--wp--custom--layout--content-meta-size) - var(--wp--style--block-gap)) auto;

		// This defines the minimum horizontal gap. An additional implicit gap is created because the right column
		// contents have a `max-width` and are justified in the center.
		gap: 0 var(--wp--style--block-gap);

		> * {
			grid-column: 1;
			grid-row: auto;
			margin-top: 0;

			// Any following item should be in the second column.
			&.is-right-column,
			+ * {
				grid-column: 2;
				margin-top: 0;
				justify-self: center;
				width: 100%;
				max-width: var(--wp--custom--layout--content-size);
			}

			&.alignfull,
			&.alignwide {
				grid-column: 1 / 3;
			}

			&.alignwide {
				width: 100%;
				max-width: 100%;
			}
		}

		> .is-left-column {
			display: flex;
			flex-direction: column;
			justify-content: space-between;
			align-items: flex-start;
		}

		// If this variation is used on a group or post content, it should put all
		// content in the second column.
		&.wp-block-post-content,
		&.wp-block-group {
			> *:not(.alignfull):not(.alignwide):not(.is-style-two-column-display) {
				grid-column: 2;
				justify-self: center;
				width: 100%;
				max-width: var(--wp--custom--layout--content-size);
			}
		}

		// Add extra class for specificity when this is used on a columns block.
		&.wp-block-columns {
			display: grid;

			> * + * {
				margin-top: 0;
			}
		}
	}

	// Add support for nested grid-containers (for example, using this pattern in post content).
	> .is-style-two-column-display {
		padding-left: 0;
		padding-right: 0;

		@include break-xlarge() {
			grid-column: 1 / 3;
			width: auto;
			max-width: none;
			justify-self: stretch;
			margin-left: calc(-1 * var(--wp--preset--spacing--60)) !important;
			margin-right: calc(-1 * var(--wp--preset--spacing--60)) !important;
			padding-left: var(--wp--preset--spacing--60);
			padding-right: var(--wp--preset--spacing--60);
		}
	}
}

// Four column grid is only supported on wide & full widths.
.is-style-four-columns:where(.alignwide, .alignfull) {

	@include break-xlarge() {
		justify-self: center;
		width: 100%;
		max-width: var(--wp--custom--layout--wide-size);

		display: grid;
		grid-template-columns: repeat(4, 1fr);
		gap: var(--wp--style--block-gap);

		> * {
			// Remove nested margins so each child is vertically aligned.
			margin: 0 !important;
		}
	}
}

.is-style-features {
	--wporg--style--feature--offset: 0.2em;
	padding: 0;
	list-style: none;
	font-size: var(--wp--preset--font-size--heading-1);
	font-weight: 200;
	line-height: 1.1;

	li {
		overflow: hidden;
		box-sizing: border-box;
		height: 1.1em;
		padding-top: var(--wporg--style--feature--offset);
		padding-left: var(--wp--preset--spacing--50);
		padding-right: var(--wp--preset--spacing--50);
		color: #6682ff; // Hardcoded color for better contrast.
		border-bottom: 1px solid var(--wp--preset--color--blueberry-3);
		transition: all 0.2s ease-in-out;

		a {
			text-decoration: none;
		}

		&:hover,
		&:focus,
		&:focus-within {
			padding-top: 0;
			color: var(--wp--preset--color--blueberry-1);
		}
	}

	// Make sure to remove padding from blocks with background colors.
	&.has-background {
		padding: 0;
	}

	// Use the set text color, if one exists.
	&.has-text-color li {
		color: inherit;
	}

	// Blocks with set font sizes should still use this line height.
	&[class*="-font-size"] {
		line-height: 1.1;
	}
}
