@use "sass:math";
@import "base/breakpoints";

// A two-column grid, with a narrower left column and content centered in the right column.
.is-style-two-column-display {
	padding-left: var(--wp--preset--spacing--60);
	padding-right: var(--wp--preset--spacing--60);

	// Clear the columns styling on smaller screens
	&.wp-block-columns {
		display: block;

		> * + * {
			margin-top: var(--wp--style--block-gap);
		}
	}

	> .alignfull {
		width: auto;
		max-width: none;
		justify-self: stretch;
		margin-left: calc(-1 * var(--wp--preset--spacing--60)) !important;
		margin-right: calc(-1 * var(--wp--preset--spacing--60)) !important;
	}

	@include break-xlarge() {
		display: grid;
		grid-template-columns: calc(var(--wp--custom--layout--content-meta-size) - var(--wp--style--block-gap)) auto;

		// This defines the minimum horizontal gap. An additional implicit gap is created because the right column
		// contents have a `max-width` and are justified in the center.
		gap: 0 var(--wp--style--block-gap);

		> * {
			grid-column: 1;
			grid-row: auto;
			margin-top: 0;

			// Any following item should be in the second column.
			&.is-right-column,
			+ * {
				grid-column: 2;
				margin-top: 0;
				justify-self: center;
				width: 100%;
				max-width: var(--wp--custom--layout--content-size);
			}

			&.alignfull,
			&.alignwide {
				grid-column: 1 / 3;
			}

			&.alignwide {
				width: 100%;
				max-width: 100%;
			}
		}

		> .is-left-column {
			display: flex;
			flex-direction: column;
			justify-content: space-between;
			align-items: flex-start;
		}

		// If this variation is used on a group or post content, it should put all
		// content in the second column.
		&.wp-block-post-content,
		&.wp-block-group {
			> *:not(.alignfull):not(.alignwide):not(.is-style-two-column-display) {
				grid-column: 2;
				justify-self: center;
				width: 100%;
				max-width: var(--wp--custom--layout--content-size);
			}
		}

		// Add extra class for specificity when this is used on a columns block.
		&.wp-block-columns {
			display: grid;

			> * + * {
				margin-top: 0;
			}
		}
	}

	// Add support for nested grid-containers (for example, using this pattern in post content).
	> .is-style-two-column-display {
		padding-left: 0;
		padding-right: 0;

		@include break-xlarge() {
			grid-column: 1 / 3;
			width: auto;
			max-width: none;
			justify-self: stretch;
			margin-left: calc(-1 * var(--wp--preset--spacing--60)) !important;
			margin-right: calc(-1 * var(--wp--preset--spacing--60)) !important;
			padding-left: var(--wp--preset--spacing--60);
			padding-right: var(--wp--preset--spacing--60);
		}
	}
}

// Four column grid is only supported on wide & full widths.
.is-style-four-columns:where(.alignwide, .alignfull) {

	@include break-xlarge() {
		justify-self: center;
		width: 100%;
		max-width: var(--wp--custom--layout--wide-size);

		display: grid;
		grid-template-columns: repeat(4, 1fr);
		gap: var(--wp--style--block-gap);

		> * {
			// Remove nested margins so each child is vertically aligned.
			margin: 0 !important;
		}
	}
}

.is-style-features {
	--wporg--style--feature--offset: 0.2em;
	--wporg--style--feature--li-height: 1.1;
	padding: 0;
	list-style: none;
	font-size: var(--wp--preset--font-size--heading-1);
	font-weight: 200;
	line-height: var(--wporg--style--feature--li-height);

	> li {
		overflow: hidden;
		box-sizing: border-box;
		height: calc(var(--wporg--style--feature--li-height) * 1em);
		padding-top: var(--wporg--style--feature--offset);
		padding-left: var(--wp--preset--spacing--50);
		padding-right: var(--wp--preset--spacing--50);
		color: #6682ff; // Hardcoded color for better contrast.
		border-bottom: 1px solid var(--wp--preset--color--blueberry-3);
		transition: all 0.2s ease-in-out;

		a {
			text-decoration: none;
		}

		&:hover,
		&:focus,
		&:focus-within {
			padding-top: 0;
			color: var(--wp--preset--color--blueberry-1);
		}
	}

	// Make sure to remove padding from blocks with background colors.
	&.has-background {
		padding: 0;
	}

	// Use the set text color, if one exists.
	&.has-text-color li {
		color: inherit;
	}

	// Blocks with set font sizes should still use this line height.
	&[class*="-font-size"] {
		line-height: var(--wporg--style--feature--li-height);
	}
}

.is-style-links-list {
	padding: 0;
	list-style: none;
	font-size: var(--wp--preset--font-size--extra-large);
	line-height: 1.125;

	> li {
		padding: 14px 0;
		// Use the current text color, to support different text/background color combos.
		border-bottom: 1px solid currentColor;

		a {
			text-decoration: none;

			&:hover,
			&:focus {
				text-decoration-line: underline;
				text-decoration-thickness: 1px;
				text-underline-offset: 0.15em;
			}
		}

		&:first-of-type {
			border-top: 1px solid currentColor;
		}
	}

	// Remove padding from blocks with background colors.
	&.has-background {
		padding: 0;
	}

	// If the text color is set to white, the border should be semi-transparent.
	// This matches the design, when the list is used inside a blue background.
	&.has-white-color > li,
	.has-white-color > & > li,
	.has-white-color *:not(.has-text-color) & > li {
		border-color: rgba(255 255 255 / 0.2);
	}
}

.is-style-serif {
	font-family: var(--wp--custom--heading--typography--font-family);
	font-size: var(--wp--preset--font-size--heading-5);
	line-height: var(--wp--custom--heading--level-5--typography--line-height);
}

.is-style-short-text {
	line-height: var(--wp--custom--body--short-text--typography--line-height);
}

.is-style-with-arrow {
	// Note, these are Sass variables to make the math easier. While we could do
	// this with `calc()`s, it would be even more unruly.
	$arrow_size: 1em;
	// Once rotated, the diagonal of the square is the hypotenuse of an isosceles
	// triangle, which can be calculated by multiplying the side × √2. We only need
	// the halfway point, so divide that by 2.
	$sqrt_2: 1.4142;
	$half_hyp: math.div(($arrow_size * $sqrt_2), 2);

	// This can be a custom property since we could let the editor control later.
	--wporg--style--with-arrow--border-size: 1px;

	position: relative;
	display: grid;
	align-items: center;
	grid-template-columns: auto;
	gap: 0.25em;

	@include break-large() {
		grid-template-columns: auto 1fr;
		gap: 0.5em;
	}

	&::before,
	&::after {
		content: "";
		display: block;
		transition: all 0.15s linear;
		box-sizing: border-box;
		grid-row: 1;
		grid-column: 2;

		@media (max-width: #{ ($break-large - 1) }) {
			grid-row: 2;
			grid-column: 1;
		}
	}

	&::before {
		position: relative;
		// Pull the arrow back by the extra space to the corner point. Add back
		// the border width to prevent the end poking out under the arrow.
		left: calc(#{($half_hyp - math.div($arrow-size, 2)) * -1} + var(--wporg--style--with-arrow--border-size));
		height: $arrow_size;
		min-width: $arrow_size;
		max-width: $arrow_size;
		border-top: var(--wporg--style--with-arrow--border-size) solid currentColor;
		border-right: var(--wporg--style--with-arrow--border-size) solid currentColor;
		transform: rotate(45deg);
		transform-origin: center;
		justify-self: end;

		@media (max-width: #{ ($break-large - 1) }) {
			// Use a smaller arrow on small screens.
			$arrow_size: 0.5em;
			$half_hyp: math.div(($arrow_size * $sqrt_2), 2);

			// Since this is Sass, not custom properties, the properties also need to be set again.
			left: calc(#{($half_hyp - math.div($arrow-size, 2)) * -1} + var(--wporg--style--with-arrow--border-size));
			height: $arrow_size;
			min-width: $arrow_size;
			max-width: $arrow_size;
		}
	}

	&::after {
		height: var(--wporg--style--with-arrow--border-size);
		width: 100%;
		min-width: 3em;
		background: currentColor;

		// Fix issue in GB, where ::after is absolutely positioned.
		.editor-styles-wrapper & {
			position: revert !important;
		}

		@media (max-width: #{ ($break-large - 1) }) {
			margin-left: 0;
		}
	}

	a[href] {
		text-decoration: none;
		text-decoration-line: none;

		&:hover,
		&:focus {
			text-decoration-line: underline;
			text-decoration-thickness: 1px;
			text-underline-offset: 0.15em;
		}
	}

	&:hover,
	&:focus-within {
		&::before {
			transform: translateX(#{math.div($arrow_size, 2)}) rotate(45deg);
		}

		&::after {
			transform: translateX(#{math.div($arrow_size, 2)});
		}
	}
}

.wp-block-navigation.is-style-dots {
	// Remove the gap, since the dots function as spacing.
	gap: 0;

	.wp-block-navigation-item {
		&::after {
			content: "·";
			color: var(--wp--preset--color--charcoal-4);
			width: 1em;
			text-align: center;
			position: relative;
		}

		&.wp-block-navigation-submenu::after,
		.wp-block-navigation-item::after,
		&:last-of-type::after {
			content: "";
		}
	}
}
